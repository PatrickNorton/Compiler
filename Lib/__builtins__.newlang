export print

$builtin("print", 0)
func print(object obj, /) {}

$builtin("int", 2)
const class int {
    public operator new (object o, /) {}

    public operator + (int other, /) -> int {}
    public operator - (int other, /) -> int {}
    public operator * (int other, /) -> int {}
    public operator // (int other, /) -> int {}
    public operator u- -> int {}
    public operator ** (int other, /) -> int {}
    public operator % (int other, /) -> int {}
    public operator << (int other, /) -> int {}
    public operator >> (int other, /) -> int {}
    public operator & (int other, /) -> int {}
    public operator | (int other, /) -> int {}
    public operator ^ (int other, /) -> int {}
    public operator ~ -> int {}

    public operator == (int other, /) -> bool {}
    public operator < (int other, /) -> bool {}
    public operator <= (int other, /) -> bool {}
    public operator > (int other, /) -> bool {}
    public operator >= (int other, /) -> bool {}

    public method strBase(int base) -> str {}
    public method divRem(int other) -> tuple[int, int] {}
}

$builtin("str", 3)
const class str {
    public int length
    public list[char] chars

    public operator new (object o, /) {}

    public operator + (str other, /) -> str {}
    public operator * (int count, /) -> str {}
    public operator == (str other, /) -> bool {}
    public operator [] (int i, /) -> char {}
    public operator [:] (slice s, /) -> str {}
    public operator iter -> char {}
    public operator in (char c, /) -> bool {}

    public method get(int i, /) -> char? {}
    public method join(Iterable[str] strs, /) -> str {}
    public method startsWith(str start, /) -> bool {}
    public method endsWith(str end, /) -> bool {}
    public method split(str split, /) -> list[str] {}
    public method splitLines() -> list[str] {}
    public method upper() -> str {}
    public method lower() -> str {}
    public method indexOf(str s, /) -> int? {}
    public method lastIndexOf(str s, /) -> int? {}
    public method encode(str encoding) -> mut bytes {}
    public method intBase(int base) -> int? {}
    public method asInt() -> int? {}

    public static method fromChars(list[char] chars) -> str {}
}

$builtin("range", 5)
const class range {
    public int length

    public operator iter -> int {}
    public operator in (int i, /) -> bool {}
    public operator == (range other) -> bool {}

    public method get(int i, /) -> int? {}
}

$builtin("iter", 7)
generic T
func iter(Iterable[T] value, /) -> mut Iterator[T] {}

$builtin("repr", 8)
func repr(object val, /) -> str {}

$builtin("input", 9)
func input(str message, /) -> str {}

$builtin("list", 10)
class list[T] {
    pubget int length

    public operator new (Iterable[T] value, /) {}

    public operator [] (int i, /) -> T {}
    public mut operator []= (int i, T value, /) {}
    public mut operator del[] (int i, /) {}
    public operator [:] (slice s, /) -> mut list[T] {}
    public mut operator [:]= (slice s, Iterable[T] values, /) {}
    public mut operator del[:] (slice s, /) {}
    public operator iter[:] (slice s, /) -> Iterable[T] {}
    public operator in (T value, /) -> bool {}
    public operator reversed -> T {}
    public operator + (list[T] other, /) -> mut list[T] {}
    public operator * (int count, /) -> mut list[T] {}
    public operator iter -> T {}

    public method get(int i, /) -> T? {}
    public mut method insert(int i, T value, /) {}
    public mut method pop() -> T? {}
    public mut method reverse() {}
    public method count(T value, /) -> int {}
    public mut method clear() {}
    public method indexOf(T value, /) -> int? {}
    public mut method add(T value, /) {}
    public mut method addAll(Iterable[T] values, /) {}
    public mut method popFirst() -> T? {}
    public mut method swap(int i, int j, /) {}
}

$builtin("set", 11)
class set[T] {
    pubget int length

    public operator in (T value, /) -> bool {}
    public mut operator del[] (T value, /) {}
    public operator == (set[T] other, /) -> bool {}
    public operator > (set[T] other, /) -> bool {}
    public operator >= (set[T] other, /) -> bool {}
    public operator < (set[T] other, /) -> bool {}
    public operator <= (set[T] other, /) -> bool {}
    public operator iter -> T {}

    public mut method add(T value, /) {}
    public mut method addAll(Iterable[T] values, /) {}
    public mut method clear() {}
}

$builtin("char", 12)
const class char {
    public operator new(int value, /) {}
    public operator + (char other, /) -> char {}
    public operator - (char other, /) -> char {}
    public operator == (char other, /) -> bool {}

    public method upper() -> char {}
    public method lower() -> char {}

    public static method fromInt(int i, /) -> char? {}
}

# $builtin("open", 13)
# func open(str file) -> Context[object] {}

$builtin("reversed", 14)
generic T
generator func reversed(Iterable[T] values, /) -> T {}

$builtin("slice", 15)
const class slice {
    public int? start
    public int? stop
    public int? step

    public method toRange() -> range {}
}

$builtin("id", 16)
func id(object o, /) -> int {}

$builtin("Array", 17)
class Array[T] {
    pubget int length

    public operator new (T value, int count, /) {}

    public operator [] (int i, /) -> T {}
    public mut operator []= (int i, T value, /) {}
    public operator iter -> T {}
    public operator in (T value, /) -> bool {}
    public operator == (Array[T] other, /) -> bool {}
    public operator [:] (slice s, /) -> Array[T] {}
    public operator reversed -> T {}
}

$builtin("enumerate", 18)
generic T
generator func enumerate(Iterable[T] value, /) -> int, T {}

$builtin("bytes", 19)
class bytes {
    pubget int length

    public operator new (object o, /) {}

    public operator + (bytes other, /) -> mut bytes {}
    public operator * (int count, /) -> mut bytes {}
    public operator == (bytes other, /) -> bool {}
    public operator [] (int i, /) -> int {}
    public operator [:] (slice s, /) -> mut bytes {}
    public mut operator []= (int i, int value, /) {}
    public operator iter -> int {}
    public operator in (int value, /) -> bool {}

    public method join(Iterable[object] values, /) -> mut bytes {}
    public method encode(str encoding) -> str {}
    public method indexOf(int value, /) -> int? {}
    public method get(int i, /) -> int? {}
    public mut method add(int value, /) {}
    public mut method addChar(char c, /, str encoding) {}
    public method startsWith(bytes value, /) -> bool {}
    public method endsWith(bytes value, /) -> bool {}
    public method lastIndexOf(int value, /) -> int? {}
    public method hex() -> str {}

    public method fromHex(str hex, /) -> mut bytes {}
}

$builtin("dict", 20)
class dict[K, V] {
    pubget int length

    public operator in (K key, /) -> bool {}
    public operator [] (K key, /) -> V {}
    public mut operator []= (K key, V value, /) {}
    public mut operator del[] (K key) {}
    public operator iter -> K, V {}
    public operator == (dict[K, V] other, /) -> bool {}

    public method get(K key, /) -> V? {}
    public mut method clear() {}
    public mut method setDefault(K key, V value, /) -> V {}
    public mut method replace(K key, V value, /) -> V? {}
    public mut method remove(K key, /) -> V? {}
}

# FIXME: Hashable on tuples
$builtin("hash", 26)
func hash(object value, /) -> int {}

$builtin("dec")
class dec {}
