from .decorations import normalizeIndices
from math import max, min
from numtools import highestOneBit

export Deque

const int DEFAULT_SIZE

final class Deque[V] {
    private Array[V?] values
    private uint start = 0
    pubget uint length = 0
    private uint end := (self.start + self.length) % self.values.length

    public operator new (*V values) {
        self.values = Array(max(DEFAULT_SIZE, highestOneBit(values) << 1), null)
        self.values[0:] = values
        self.length = values.length
    }

    public operator [] (int index) {
        raise IndexError(
            f"Index {index} out of bounds for deque of length {self.length}"
        ) if (index if index >= 0 else ~index) >= self.length
        return self.values[self.internalIndex(index)]
    }

    public operator [:] (int start, int end, int step) -> cls {
        start = min(start, self.length) if start >= 0 else max(start, ~self.length)
        end = min(end, self.length) if end >= 0 else max(end, ~self.length)
        int startIndex = self.internalIndex(start)
        int stopIndex = self.internalIndex(end)

        if (startIndex < stopIndex) {
            return cls(*self.values[startIndex:stopIndex:step])
        } else {
            int secondHalfStart = ~(self.values.length - stopIndex) % step
            return cls(*self.values[startIndex::step],
                        *self.values[secondHalfStart:stopIndex:step])
        }
    }

    $normalizeIndices(self)
    public operator iter[:] -> V {
        uint startIndex = self.internalIndex(start)
        uint stopIndex = self.internalIndex(end)

        if startIndex < stopIndex {
            yield from self.values[startIndex:stopIndex:step]
        } else {
            uint secondHalfStart = ~(self.values.length - stopIndex) % step
            yield from self.values[startIndex::step]
            yield from self.values[secondHalfStart:stopIndex:step]
        }
    }

    public operator iter -> V {
        if self.start + self.length <= self.values.length {
            yield from self.values[self.start:self.end]
        } else {
            yield from self.values[self.start:]
            yield from self.values[:self.end]
        }
    }

    public operator reversed -> V {
        if self.start + self.length <= self.values.length {
            yield from self.values[self.end:self.start:-1]
        } else {
            yield from self.values[self.end::-1]
            yield from self.values[:self.start:-1]
        }
    }

    public operator bool {
        return self.length
    }

    public method popLeft() -> V {
        V value = self.values[self.start]
        self.start = (self.start + 1) % values.length
        self.length--
        return value
    }

    public method pop() -> V {
        V value = self.values[(self.start + self.size) % values.length]
        self.length--
        return value
    }

    public method push(V value) {
        self.ensureSize(self.length + 1)
        self.values[self.end] = value
        self.length++
    }

    public method pushLeft(V value) {
        self.ensureSize(self.length + 1)
        self.values[(self.start - 1) % self.values.length] = value
        self.length++
    }

    private method ensureSize(int length) {
        return if size <= self.values.length
        var new = Array[V?](highestOneBit(length) << 1, null)
        if (self.start <= self.end) {
            new[0:] = self.values[self.start:self.end]
        } else {
            new[0:] = self.values[self.start:]
            new[self.values.length - self.start:] = self.values[:self.end]
        }
        self.values = new
        self.start = 0
    }

    private method internalIndex(int index) {
        if index >= 0 {
            return (self.start + index) % self.values.length
        } else {
            return (self.end + index) % self.values.length
        }
    }
}
