from types import Array

export IdentityMap


const int DEFAULT_ARRAY_SIZE = 1 << 4
const dec RESIZE_THRESHOLD = 0.75
const int PERTURB_SHIFT = 8


enum Empty {
    EMPTY,
    DELETED
}


class IdentityMap[K, V] from dict[K, V] {
    private Array[tuple[K, V]|Empty] values
    pubget uint length

    public operator new (*tuple[K, V] values) {
        int length = max(highestOneBit(values.length) << 1, DEFAULT_ARRAY_SIZE)
        self.internal = Array(length, Empty.EMPTY)
        self.valueList = []
        self.length = 0
        self.resize(values.length)
        for K key, V value in values {
            self[key] = value
        }
    }

    public operator [] (K key) -> V {
        uint index = self.getInfo(key)
        raise IndexError if self.values[index] is Empty.EMPTY
        return (self.values[index] casted tuple[K, V])[1]
    }

    public operator []= (K key, V value) {
        self.resize(self.length + 1)
        uint index = self.getInfo(key, returnDeleted=true)
        if self.values[index] instanceof Empty {
            self.length++
        }
        self.values[index] = (key, value)
    }

    public operator del[] (K key) {
        int oldIndex = self.getInfo(key)
        raise KeyError if self.values[oldIndex] is Empty.EMPTY
        self.values[oldIndex] = Empty.DELETED
        self.length--
    }

    public operator in (K key) {
        return not (self.values[self.getInfo(key)] instanceof Empty)
    }

    public operator iter -> V {
        yield from ((i casted tuple[K, V])[1] for var i in self.valueList if i not instanceof Empty)
    }

    public operator hash {
        return hash(f"dict[{K}, {V}]", *self)
    }

    public method remove(V value) -> K {
        del self[self.keyOf(value)]
    }

    public method keyOf(V value) -> K {
        for K key, V val in self {
            if value is val {
                return key
            }
        }
    }

    private method getInfo(K key, *, bool returnDeleted = false) -> uint {
        uint index = id(key) % self.values.length
        while true {
            var value = self.values[index]
            return index if value is Empty.EMPTY or (returnDeleted and value is Empty.DELETED)
            continue if value is Empty.DELETED
            var v = value casted tuple[K, V]
            return index if v[0] is key
            index = (5*index + 1 + (id(key) >> PERTURB_SHIFT)) % self.values.length
        }
    }

    private method resize(uint size) {
        return if size / self.values.length < RESIZE_THRESHOLD
        uint newSize = self.values.length << 1
        var old = self.values
        self.values = Array(newSize, Empty.EMPTY)
        for var v in (i casted tuple[K, V] for var i in old if i not instanceof Empty) {
            self.values[self.getInfo(v[1], returnDeleted=true)] = v
        }
    }
}
