export count, cycle, repeat

generator func count(int start = 0, *, bool reverse = false) -> int {
    yield from [start::reverse-1]
}

generic T
generator func cycle(Iterable[T] p) -> T {
    while true {
        yield from p
    }
}

generic T
generator func repeat(T value, int? times = null) -> T {
    if times is null {
        while true {
            yield value
        }
    } else {
        dotimes times!! {
            yield value
        }
    }
}
