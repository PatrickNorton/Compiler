from interfaces typeget Boolable, Iterable, Callable, Iterator

from .functions import any
from types import Array

export accumulate, chain, compress, dropWhile, filter, filterEqual, filterFalse,
export filterNotEqual, firstN, map, pairs, takeWhile, traverse, withNext, zip, zipLongest

# With thanks to Python for all the ideas <3

generic T
generator func accumulate(Iterable[T] value, /, Callable[T, T, T] function = \+, *, T? initial = null) -> T {
    Iterator[T] iter = iter(value)
    T total = initial ?? iter.next()
    yield total
    for T i in iter {
        total = function(total, i)
        yield total
    }
}

generic T
generator func chain(*Iterable[T] values) -> T {
    yield from (*i for var i in values)
}

generic T, U
generator func compress(Iterable[T] data, Iterable[U] selectors) -> T {
    yield from (i for T i, U j in zip(data, selectors) if j)
}

generic T
generator func dropWhile(Callable[T, bool] predicate, Iterable[T] iterable) -> T {
    Iterator[T] iter = iter(iterable)
    for T i in iter {
        if not predicate(i) {
            yield i
            break
        }
    }
    yield from iter
}

generic T
generator func filter(Callable[T, bool] predicate, Iterable[T] sequence) -> T {
    yield from (i for T i in sequence if predicate(i))
}

generic T
generator func filterEqual(T sentinel, Iterable[T] sequence) -> T {
    yield from (i for T i in sequence if i == sentinel)
}

generic T
generator func filterFalse(Callable[T, bool] predicate, Iterable[T] sequence) -> T {
    yield from (i for T i in sequence if not predicate(i))
}

generic T
generator func filterNotEqual(T sentinel, Iterable[T] sequence) -> T {
    yield from (i for T i in sequence if i != sentinel)
}

generic T
generator func firstN(int count, Iterable[T] sequence) -> T {
    var iterator = iter(sequence)
    try {
        dotimes count {
            yield iterator.next()
        }
    } except StopIteration {}
}

generic T, U
generator func map(Callable[T, U] function, Iterable[T] sequence) -> U {
    yield from (function(i) for T i in sequence)
}

generic T
generator func pairs(Iterable[T] values) -> T, T {
    var iter = iter(values)
    try {
        while true {
            T v1 = iter.next()
            T v2 = iter.next()
            yield v1, v2
        }
    } except StopIteration {}
}

generic T
generator func takeWhile(Callable[T, bool] predicate, Iterable[T] sequence) -> T {
    yield from (i for T i in sequence while predicate)
}

generic T[Iterable[U|Iterable[T]]], U
generator func traverse(T sequence) -> U {
    for var element in sequence {
        if element instanceof Iterable[T] {
            yield from traverse(element casted Iterable[T])
        } else {
            yield element casted U
        }
    }
}

generic T
generator func withNext(Iterable[T] values) -> T, T {
    var iter = iter(values)
    mut T previous
    try {
        previous = iter.next()
    } except StopIteration {
        return
    }
    for T current in iter {
        yield previous, current
        previous = current
    }
}

generic T, U
generator func zip(Iterable[T] value1, Iterable[T] values2) -> T, U {
    var iter1 = iter(value1)
    var iter2 = iter(value2)
    while true {
        try {
            T next1 = iter1.next()
            U next2 = iter2.next()
            yield next1, next2
        } except StopIteration {
            return
        }
    }
}

generic T
generator func zipLongest(*Iterable[T] values, T defaultVal = null) -> T {
    final Array[Iterator[T]] iterators = Array(values.length, *apply(iter, values))
    final Array[bool] hasNext = Array(values.length, false)
    while any(hasNext) {
        final Array[T] next = Array(values.length, defaultVal)
        for int i, var j in enumerate(iterators) {
            if hasNext[i] {
                try {
                    next[i] = j.next
                } except StopIteration {
                    hasNext[i] = false
                }
            }
        }
        yield *next
    }
}
