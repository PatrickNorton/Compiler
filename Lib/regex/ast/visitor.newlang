from .ast import Ast, ClassSetBinaryOp, ClassSetItem, ClassSet, Repetition, Group

export Visitor, visit

interface Visitor[O] {
    public method finish() -> O

    public method start() {}

    public mut method visitPre(Ast _ast) {}

    public mut method visitPost(Ast _ast) {}

    public mut method visitAlternationIn() {}

    public mut method visitClassSetItemPre(ClassSetItem _ast) {}

    public mut method visitClassSetItemPost(ClassSetItem _ast) {}

    public mut method visitClassSetBinaryOpPre(ClassSetBinaryOp _ast) {}

    public mut method visitClassSetBinaryOpPost(ClassSetBinaryOp _ast) {}

    public mut method visitClassSetBinaryOpIn(ClassSetBinaryOp _ast) {}
}

class HeapVisitor {
    list[tuple[Ast, Frame]] stack
    list[tuple[ClassInduct, ClassFrame]] stackClass
}

union Frame {
    Repetition Repetition
    Group Group
    tuple[Ast, list[Ast]] Concat
    tuple[Ast, list[Ast]] Alternation
}

union ClassFrame {
    tuple[ClassSetItem, list[ClassSetItem]] Union
    ClassSetBinaryOp Binary
    tuple[ClassSetBinaryOp, ClassSet, ClassSet] BinaryLHS
    tuple[ClassSetBinaryOp, ClassSet] BinaryRHS
}

union ClassInduct {
    ClassSetItem Item
    ClassSetBinaryOp BinaryOp
}

generic T
func visit(Ast ast, Visitor[T] visitor) -> T {
    raise NotImplemented()
    # return HeapVisitor().visit(ast, visitor)
}
