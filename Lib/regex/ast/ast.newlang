export Span, Ast
export Alternation, Comment, Concat, CaptureName, Group, Position
export ClassSet, ClassSetUnion, ClassBracketed, ClassSetBinaryOpKind, ClassSetBinaryOp, ClassSetItem

const class Span {
    public Position start
    public Position end
}

union Ast {
    Span Empty
    SetFlags Flags
    Literal literal
    Span Dot
    Assertion Assertion
    Class Class
    Repetition Repetition
    Group Group
    Alternation Alternation
    Concat Concat
}

const class Flags {
    public Span span
    public list[FlagsItem] items
}

union LiteralKind {
    null Verbatim
    null Punctuation
    null Octal
    HexLiteralKind HexFixed
    HexLiteralKind HexBrace
    SpecialLiteralKind Special
}

const class Alternation {
    public Span span
    public list[Ast] asts
}

const class Assertion {
    Span span
    AssertionKind kind
}

enum AssertionKind {
    START_LINE,
    END_LINE,
    START_TEXT,
    END_TEXT,
    WORD_BOUNDARY,
    NOT_WORD_BOUNDARY
}

const class Comment {
    public Span span
    public str comment

    public operator new (Span span, str comment) {
        self.span = span
        self.comment = comment
    }
}

const class Concat {
    public Span span
    public list[Ast] asts
}

const class CaptureName {
    public Span span
    public str name
    public int index
}

const class Group {
    public Span span
    public GroupKind kind
    public Ast ast
}

union GroupKind {
    int CaptureIndex
    CaptureName CaptureName
    Flags NonCapturing
}

const class Literal {
    public Span span
    public LiteralKind kind
    public char c
}

const class Position {
    public int offset
    public int line
    public int column

    public operator new(int offset, int line, int column) {
        self.offset = offset
        self.line = line
        self.column = column
    }
}

const class SetFlags {
    public Span span
    public Flags flags
}

union Class {
    ClassUnicode Unicode
    ClassPerl Perl
    ClassBracketed Bracketed
}

union ClassSet {
    ClassSetItem Item
    ClassSetBinaryOp BinaryOp
}

const class ClassSetUnion {
    public Span span
    public ClassSetItem items
}

const class ClassBracketed {
    public Span span
    public bool negated
    public ClassSet kind
}

enum ClassSetBinaryOpKind {
    INTERSECTION,
    DIFFERENCE,
    SYMMETRIC_DIFFERENCE
}

const class Repetition {
    public Span span
    public RepetitionOp op
    public bool greedy
    public Ast ast
}

const class RepetitionOp {
    public Span span
    public RepetitionKind kind
}

union RepetitionKind {
    null ZeroOrOne
    null ZeroOrMore
    null OneOrMore
    RepetitionRange Range
}

union RepetitionRange {
    int Exactly
    int AtLeast
    tuple[int, int] Bounded
}

enum Flag {
    CASE_INSENSITIVE,
    MULTI_LINE,
    DOT_MATCHES_NEWLINE,
    SWAP_GREED,
    UNICODE,
    INGORE_WHITESPACE
}

class FlagsItem {
    public Span span
    public FlagsItemKind kind
}

class FlagsItemKind {
    null Negation
    Flag Flag
}

enum SpecialLiteralKind {
    BELL,
    FORM_FEED,
    TAB,
    LINE_FEED,
    CARRIAGE_RETURN,
    VERTICAL_TAB,
    SPACE
}

enum HexLiteralKind {
    X,
    UNICODE_SHORT,
    UNICODE_LONG
}

const class ClassUnicode {
    public Span span
    public bool negated
    public ClassUnicodeKind kind
}

union ClassUnicodeKind {
    char OneLetter
    str Named
    tuple[ClassUnicodeOpKind, str, str] NamedValue
}

enum ClassUnicodeOpKind {
    EQUAL,
    COLON,
    NOT_EQUAL
}

const class ClassPerl {
    public Span span
    public ClassPerlKind kind
    public bool negated
}

enum ClassPerlKind {
    DIGIT,
    SPACE,
    WORD
}

union ClassSetItem {
    Span Empty
    Literal Literal
    ClassSetRange Range
    ClassAscii Ascii
    ClassUnicode Unicode
    ClassPerl Perl
    ClassBracketed Bracketed
    ClassSetUnion Union
}

const class ClassSetRange {
    public Span span
    public Literal start
    public Literal end
}

const class ClassSetBinaryOp {
    public Span span
    public ClassSetBinaryOpKind kind
    public ClassSet lhs
    public ClassSet rhs
}

const class ClassAscii {
    public Span span
    public ClassAsciiKind kind
    public bool negated
}

enum ClassAsciiKind {
    ALNUM,
    ALPHA,
    ASCII,
    BLANK,
    CNTRL,
    DIGIT,
    GRAPH,
    LOWER,
    PRINT,
    PUNCT,
    SPACE,
    UPPER,
    WORD,
    X_DIGIT
}
