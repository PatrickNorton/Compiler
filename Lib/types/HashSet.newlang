from types typeget Hashable

from numtools import highestOneBit
from types import Array

export HashSet


const int DEFAULT_ARRAY_SIZE = 1 << 4
const dec RESIZE_THRESHOLD = 0.75


typedef VarInfo as tuple[int64, T]


enum Empty {
    EMPTY,
    DELETED
}


class HashSet[T[Hashable]] from set[T] {
    private Array[*VarInfo|Empty] values
    pubget int length := \+(1 for var i in self.values if not (i instanceof Empty))

    public operator new (*T items) {
        self(items)
    }

    public operator new (Iterable[T] items) {
        int length = max(highestOneBit(values.length) << 1, DEFAULT_ARRAY_SIZE)
        self.internal = Array(length, Empty.EMPTY)
        self.valueList = []
        self.length = 0
        self.resize(values.length)
        for K key, V value in values {
            self.add(key)
        }
    }

    public operator + (Set[T] other) -> cls {
        return {*self, *other}
    }

    public operator | = operator +

    public operator & (Set[T] other) -> cls {
        return {i for E i in other if i in self}
    }

    public operator ^ (Set[T] other) -> cls {
        return {i for E i in self if i not in other} + {i for E i in other if i not in self}
    }

    public operator bool {
        return self.length
    }

    public operator del[] (T value) {
        raise ValueError if value not in self
        self.discard(value)
    }

    public operator in (T value) {
        return self.values[self.arrayIndex(value)] is not Empty.EMPTY
    }

    public method add(E value) -> self {
        self.resize(self.length + 1)
        self.values[self.arrayIndex(value, returnDeleted=true)] = (hash(value), value)
    }

    public method discard(T value) {
        var index = self.arrayIndex(value)
        if self.values[index] is not Empty.EMPTY {
            self.values[index] = Empty.DELETED
        }
    }

    public method pop() -> T {
        for var i in self.values {
            if not (i instanceof Empty) {
                self.discard((i casted VarInfo)[1])
                return (i casted VarInfo)[1]
            }
        }
        raise ValueError("Cannot pop() from empty set")
    }

    public method clear() {
        for int i in enumerate(self.values) {
            self.values[i] = Empty.EMPTY
        }
    }

    private method arrayIndex(T value, *, bool returnDeleted = false) {
        uint index = hash(key) % self.values.length
        while true {
            var value = self.values[index]
            return index if value is Empty.EMPTY or (returnDeleted and value is Empty.DELETED)
            continue if value is Empty.DELETED
            var v = value casted VarInfo
            return index if self.values[v][0] == hash(key) and self.values[v][1] == key
        }
    }

    public method resize(uint newSize) {
        return if size / self.values.length < RESIZE_THRESHOLD
        uint newSize = self.values.length << 1
        var old = self.values
        self.values = Array(newSize, Empty.EMPTY)
        for var v in (i casted VarInfo for var i in old if not (i instanceof Empty)) {
            self.values[self.getInfo(v[1], returnDeleted=true)] = v
        }
    }
}
