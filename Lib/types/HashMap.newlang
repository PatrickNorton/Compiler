from collections typeget AbstractDict
from .interfaces typeget Hashable

from .natives import Array
from numtools import highestOneBit
from math import max

export HashMap

typedef VarInfo as Tuple[int64, K, V]

const int DEFAULT_ARRAY_SIZE = 1 << 4
const dec RESIZE_THRESHOLD = 0.75
const int PERTURB_SHIFT = 5

enum Empty {
    EMPTY,
    DELETED
}

class HashMap[K[Hashable], V] from AbstractDict[K, V] {
    private Array[VarInfo|Empty] values
    private uint length

    public operator new (*tuple[K, V] values) {
        int length = max(highestOneBit(values.length) << 1, DEFAULT_ARRAY_SIZE)
        self.internal = Array(length, Empty.EMPTY)
        self.valueList = []
        self.length = 0
        self.resize(values.length)
        for K key, V value in values {
            self[key] = value
        }
    }

    public operator [] (K key) -> V {
        uint index = self.getInfo(key)
        raise IndexError if self.values[index] is Empty.EMPTY
        return (self.values[index] casted VarInfo)[2]
    }

    public operator []= (K key, V value) {
        self.resize(self.length + 1)
        uint index = self.getInfo(key, returnDeleted=true)
        if self.values[index] instanceof Empty {
            self.length++
        }
        self.values[index] = (hash(key), key, value)
    }

    public operator del[] (K key) {
        int oldIndex = self.getInfo(key)
        raise KeyError if self.values[oldIndex] is Empty.EMPTY
        self.values[oldIndex] = Empty.DELETED
        self.length--
    }

    public operator in (K key) {
        return self.values[self.getInfo(key)] not instanceof Empty
    }

    public operator iter -> V {
        yield from ((i casted VarInfo)[2] for var i in self.valueList if i not instanceof Empty)
    }

    public generator method keys() -> K {
        yield from (key for K key in self)
    }

    public method remove(V value) -> K {
        del self[self.keyOf(value)]
    }

    private method getInfo(K key, *, bool returnDeleted = false) -> uint {
        uint index = hash(key) % self.values.length
        uint? deleted = null
        while true {
            var value = self.values[index]
            if value is Empty.DELETED and returnDeleted {
                deleted = value
            }
            return index if value is Empty.EMPTY
            continue if value is Empty.DELETED
            var v = value casted VarInfo
            return deleted ?? index if v[0] == hash(key) and v[1] == key
            index = (5*index + 1 + (hash(key) >> PERTURB_SHIFT)) % self.values.length
        }
    }

    private method resize(uint size) {
        return if size / self.values.length < RESIZE_THRESHOLD
        uint newSize = self.values.length << 1
        var old = self.values
        self.values = Array(newSize, Empty.EMPTY)
        for var v in (i casted VarInfo for var i in old if i not instanceof Empty) {
            self.values[self.getInfo(v[1], returnDeleted=true)] = v
        }
    }
}
