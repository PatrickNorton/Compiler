from .annotations import DefaultInterface
from itertools import any

export Boolable, Callable, Comparable, singleComparable, triComparable, Iterable, Indexable, Sliceable

$DefaultInterface
interface Boolable {
    operator bool
}

$DefaultInterface
@contravariant
interface Callable[*P, R] {
    operator () (*P values, /) -> R
}

$DefaultInterface
@covariant
interface Comparable[T] {
    operator <=> (T other, /)
    operator < (T other, /)
    operator > (T other, /)
    operator == (T other, /)

    operator <= (T other, /) {
        return self == other or self < other
    }
    operator >= (T other, /) {
        return self == other or self > other
    }
}

$DefaultInterface
@covariant
interface singleComparable[T] from Comparable[T] {
    operator <=> (T other, /)

    operator < (T other, /) {
        return (self <=> other) == -1
    }

    operator == (T other, /) {
        return (self <=> other) == 0
    }

    operator > (T other, /) {
        return (self <=> other) == 1
    }
}

$DefaultInterface
@covariant
interface triComparable from Comparable[T] {
    operator < (T other, /)
    operator > (T other, /)
    operator == (T other, /)

    operator <=> (T other, /) {
        return 0 if self == other
        return 1 if self > other
        return -1
    }
}

$DefaultInterface
interface Hashable {
    operator hash
}

$DefaultInterface
@covariant
interface Iterable[T] {
    pubget uint length

    operator iter -> T

    operator in (T value, /) {
        return any(value == i for T i in self)
    }
}

$DefaultInterface
@covariant
interface Indexable[K, V] {
    operator [] (K key, /) -> V
    operator []= (K key, V value, /)
}

$DefaultInterface
@covariant
interface Sliceable[V] {
    operator [:] (int start, int stop, int step, /) -> Iterable[V]
    operator [:]= (int start, int stop, int step, Iterable[V] values, /)
}
