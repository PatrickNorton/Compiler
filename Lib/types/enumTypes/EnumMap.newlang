from .. typeget Enum

from collections import AbstractDict
from itertools import any

export EnumMap

enum Empty {
    EMPTY
}

class EnumMap[K[Enum[K]], V] from AbstractDict[K, V] {
    private Array[V|Empty] values

    public operator new (*tuple[K, V] items) {
        self.values = Array(K.length, Empty.EMPTY)
        for var item in items {
            self[item[0]] = item[1]
        }
    }

    public operator new (dict[K, V] items) {
        self.values = Array(K.length, Empty.EMPTY)
        for K key, V value in items {
            self[key] = value
        }
    }

    public operator + (dict[K, V] items, /) -> cls {
        return {**self, **other}
    }

    public operator [] (K key) -> V {
        var value = self.values[key.ordinal]
        raise KeyError if value is Empty.EMPTY
        return value casted V
    }

    public operator []= (K key, V value) {
        raise KeyError if key not in self
        self.values[key.ordinal] = value
    }

    public operator del[] (K key) {
        raise KeyError if key not in self
        self.values[key.ordinal] = Empty.EMPTY
    }

    public operator in (K key) {
        return self.values[key.ordinal] is not Empty.EMPTY
    }

    public operator iter -> K, V {
        yield from (K[i], value for int i, var value in enumerate(self.values) if value is not Empty.EMPTY)
    }

    public operator bool {
        return any(i is not Empty.EMPTY for var i in self.values)
    }

    public method remove(V value) -> K {
        K key = self.keyOf(value)
        del self[key]
        return key
    }

    public method keyOf(V value) -> K {
        for int i, var val in enumerate(self.values) {
            return K[i] if value == val
        }
        raise KeyError
    }
}
