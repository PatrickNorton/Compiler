export LinkedList

class LinkedList[T] from list[T] {
    private LLNode[T]? first
    private LLNode[T]? last
    pubget uint length

    public operator new (*T nodes) {
        self.length = nodes.length
        if not nodes {
            self.first = null
            self.last = null
        } else {
            self.first = LLNode(null, nodes[0], null)
            var current = self.first
            for T node in nodes[1:] {
                LLNode next = LLNode[T](current, node, null)
                current.next = next
                current = next
                self.last = next
            }
        }
    }

    public operator [] (int index) {
        return self.get_LLNode(index).this
    }

    public operator []= (int index, T value) {
        var node = self.get_LLNode(position)
        node.this = value
    }

    public operator [:] (int start, int stop, int step) -> list[T] {
        return list(self.operator iter[:](start, stop, step))
    }

    @normalizeIndices(self)
    public operator [:]= (int start, int stop, int step, Iterable[T] values) {
        var startNode = self.get_LLNode(start)
        var endNode = self.get_LLNode(end)
        if step < 0 {
            var current = endNode
            var iterator = iter(values)
            dotimes (stop - start) % step {
                try {
                    current.this = iterator.next()
                } except StopIteration {
                    break
                }
                dotimes step {
                    current = current.previous!!
                }
            }
        } else {
            var current = startNode
            var iterator = iter(values)
            dotimes (start - stop) % step {
                try {
                    current.this = iterator.next()
                } except StopIteration {
                    break
                }
                dotimes step {
                    current = current.next!!
                }
            }
        }
        self.length = \+(1 for var i in iter(lambda a => a.next, start=self.first, end=null))
    }

    private method get_LLNode(int index) -> LLNode {
        if index < 0 {
            raise IndexError if self.last is null
            var current = self.last!!
            dotimes ~index {
                raise IndexError if current.previous is null
                current = current.previous!!
            }
            return current
        } else {
            raise IndexError if self.first is null
            var current = self.first!!
            dotimes index {
                raise IndexError if current.next is null
                current = current.next!!
            }
            return current
        }
    }

    public operator == (list[T] other) {
        return all(i == j for T i, T j in self, other)
    }

    public operator iter -> T {
        var current = self.first
        while current is not null {
            yield current!!.this
            current = current!!.next
        }
    }

    @normalizeIndices(self)
    public operator iter[:] (int start, int stop, int step) -> T {
        if step < 0 {
            var current = self.get_LLNode(self.stop)
            dotimes (start - stop) % step {
                yield current.this
                dotimes step {
                    current = current!!.previous  # No null check needed, indices already known
                }
            }
        } else {
            var current = self.get_LLNode(self.start)
            dotimes (stop - start) % step {
                yield current.this
                dotimes step {
                    current = current!!.next  # No null check needed, indices already known
                }
            }
        }
    }

    public operator reversed -> T {
        var current = self.last
        while current is not null {
            yield current!!.this
            current = current!!.previous
        }
    }

    public operator bool {
        return self.first is not null
    }

    public operator + (list[T] other) -> cls {
        return cls(*self, *other)
    }

    public method append(T value) -> self {
        var new_last = LLNode[T](self.last, value, null)
        self.last.next = new_last
        self.last = new_last
        self.length++
        return self
    }

    public method extend(Iterable[T] values) {
        for T value in values {
            self.append(value)
            self.length++
        }
    }

    public method insert(int position, T value) {
        if self.first is null {
            self.first = LLNode[T](null, value, null)
            self.last = self.first
        } elif position == 0 {
            var node = self.first!!
            var new_node = LLNode[T](null, value, node)
            self.first = new_node
        } elif position == -1 or position == self.length {
            var node = self.get_LLNode(-1)
            var new_node = LLNode[T](node, value, null)
            node.next = new_node
            self.last = new_node
        } else {
            var node = self.get_LLNode(position)!!
            var next = node.next
            var new_node = LLNode[T](node, value, next)
            node.next = new_node
            next.previous = new_node
        }
        self.length++
    }

    public method pop(int position) -> T {
        var node = self.get_LLNode(position)
        if node.previous is not null {
            node.previous!!.next = node.next
            if node.next is not null {
                node.next!!.next = node.previous
            } else {
                self.last = node.previous
            }
        } else {
            if node.next is not null {
                node.next!!.previous = null
                self.first = node.next
            } else {
                self.first = null
                self.last = null
            }
        }
        self.length--
        return node.this
    }

    public method index(T value) -> uint {
        for int i, T val in enumerate(self) {
            return i if value == val
        }
        raise ValueError(f"Value {value} not in list")
    }

    public method reverse() {
        self.last, self.first = self.first, self.last
        var next = self.last
        while next is not null {
            var trueNext = next!!
            next.previous, next.next = next.next, next.previous
            next = next.previous
        }
    }

    public method insert(T value, int index) {
        var node = self.get_LLNode(position)
        if node.next is not null {
            node.next!!.previous = node
        }
        node.next = LLNode(node, value, node.next)
    }

    public method clear() {
        self.last = null
        self.first = null
    }
}

class LLNode[T] {
    LLNode[T]? previous
    T this
    LLNode[T]? next
}
