from constants import E
from types typeget Multiplicable, Number, Summable

export abs, ceil, comb, copySign, fact, floor, gcd, max, min, perm, prod, sum

func abs(int n) -> uint {
    return (n if n >= 0 else -n)
}

func abs(T[Number] n) -> T {
    return (-n if n < 0 else n)
}

func ceil(Number n, /) -> int {
    return (int(x) if x % 1 == 0 else x // 1 + 1)
}

func comb(uint n, uint k) -> int {
    return fact(n) // (fact(k) * fact(n - k))
}

func copySign(T[Number] a, U[Number] b) -> T {
    return abs(a) * sign(b)
}

func fact(uint i) -> uint {
    return (1 if i == 0 else \*([1:i+1]))
}

func floor(Number n, /) -> int {
    return x // 1
}

func gcd(int a, int b) -> b {
    while a != b {
        if a > b {
            a -= b
        } else { # a < b
            b -= a
        }
    }
    return a # == b
}

func max(*T[Comparable[T]] values) -> T {
    return apply(lambda x, y => (x <=> y) >= 0, *values)
}

func min(*T[Comparable[T]] values) -> T {
    return apply(lambda x, y => (x <=> y) <= 0, *values)
}

func perm(uint n, uint? k = null) -> uint {
    return fact(n) // fact(n - (k ?? n))
}

func prod(*T[Number] iterable) -> T {
    return \*(*iterable)
}

func sum(*T[Number] summands) -> T {
    return \+(*summands)
}
